#!/usr/bin/env node

var cli = require('cli'),
    clr = require('cli-color'),
    fs = require('fs'),
    path = require('path'),
    _ = require('lodash'),
    glob = require('glob'),
    Handlebars = require('handlebars'),
    exifRenamer = require('../lib/exif-renamer')();

cli.parse({
    no_ctime:  ['c', 'do not use the ctime fallback if no EXIF data is present'],
    dryrun:    ['d', 'run without performing filesystem changes'],
    exif:      ['e', 'get the exif data for the specified image'],
    filetypes: ['f', 'comma-separated list of file extensions to process (jpg and jpeg are default)', 'string'],
    overwrite: ['o', 'overwrite existing files'],
    recursive: ['r', 'recursively process the specified directory'],
    template:  ['t', 'renaming template', 'string', '{{datetime}}_{{file}}'],
    watch:     ['w', 'watch the specified directory for changes and process automatically']
});

cli.main(function(args, options) {

    function reporter(err, results) {
        if (err) {
            cli.error(err);
        }
        results = (_.isArray(results)) ? results : [results];
        var tmpl = [
            clr.cyan('[old] ' + '{{original.path}}'),
            clr.green('[new] ' + '{{processed.path}}\n')
        ].join('\n');
        results.forEach(function(result) {
            if (result.error) {
                cli.error(result.error);
            }
            else {
                cli.info(result.status);
                console.log(Handlebars.compile(tmpl)(result));
            }
        });
    }

    // set fallback_ctime
    exifRenamer.config.fallback_ctime = !options.no_ctime;

    // set dryrun
    exifRenamer.config.dryrun = options.dryrun;

    // set overwrite
    exifRenamer.config.overwrite = options.overwrite;

    // set valid_extensions
    if (options.filetypes) {
        exifRenamer.config.valid_extensions = options.filetypes.split(/\s*\,\s*/);
    }

    // if --watch or --recursive, only use the first argument
    if (options.watch || options.recursive) {
        args = args.slice(0,1);
    }

    // resolve globbed arguments into an array of paths
    var paths = [];
    args.forEach(function(p) {
        paths = paths.concat(glob.sync(p));
    });
    // remove dupes and resolve paths
    paths = _(paths).uniq().map(function(p) {
        return path.resolve(p);
    }).value();

    if (!paths.length) {
        console.log(Handlebars.compile('"{{args}}" did not match any files or directories')({args: args.join(' ')}));
    }

    paths.forEach(function(p) {
        var exists = p && fs.existsSync(p),
            is_dir = exists && fs.lstatSync(p).isDirectory(),
            is_file = exists && fs.lstatSync(p).isFile();

        if (options.watch) {
            if (!is_dir) {
                return cli.fatal('the --watch option requires a valid directory');
            }
            cli.info('watching directory: ' + p);
            exifRenamer.watch(p, options.template, reporter);
        }

        else if (options.recursive) {
            if (!is_dir) {
                return cli.fatal('the --recursive option requires a valid directory');
            }
            exifRenamer.rename_dir(p, options.template, true, reporter);
        }

        else if (options.exif) {
            if (!is_file) {
                return cli.fatal('the --exif option requires a valid file');
            }
            exifRenamer.exif(p, function(err, exif) {
                if (err) return cli.error(err);
                cli.info('EXIF data for ' + p);
                console.log(exif);
            });
        }

        else {
            try {
                if (is_dir) {
                    cli.info('Processing directory: ' + p);
                    exifRenamer.rename_dir(p, options.template, reporter);
                }
                else if (is_file) {
                    exifRenamer.rename(p, options.template, reporter);
                }
                else if (!is_file) {
                    return cli.fatal(p + ' not found');
                }
            }
            catch (e) {
                console.log(e);
                cli.info(Handlebars.compile('the argument "{{f}}" did not match any files')({f:f}));
            }
        }

    }.bind(this));
});
